AWSTemplateFormatVersion: '2010-09-09'
Description: 'DevOps Intelligence Agent Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - development
      - staging
      - production
  
  BedrockModelId:
    Type: String
    Default: anthropic.claude-3-sonnet-20240229-v1:0
    Description: Bedrock model ID to use

Resources:
  # DynamoDB Tables
  ConversationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${Environment}-devops-agent-conversations'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: DevOpsAgent

  SessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${Environment}-devops-agent-sessions'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment

  ActionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${Environment}-devops-agent-actions'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
        - AttributeName: action_id
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
        - AttributeName: action_id
          KeyType: RANGE
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # S3 Buckets
  KnowledgeBaseBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${Environment}-devops-agent-knowledge-base-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Environment
          Value: !Ref Environment

  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${Environment}-devops-agent-logs-${AWS::AccountId}'
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays: 90
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-DevOpsAgent-LambdaRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: '*'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt ConversationsTable.Arn
                  - !GetAtt SessionsTable.Arn
                  - !GetAtt ActionsTable.Arn
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub '${KnowledgeBaseBucket.Arn}/*'
                  - !Sub '${LogsBucket.Arn}/*'
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Secrets Manager for API Keys
  APIKeysSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${Environment}-devops-agent-api-keys'
      Description: API keys for DevOps Agent
      SecretString: !Sub |
        {
          "jwt_secret": "${AWS::StackId}",
          "github_token": "",
          "slack_webhook": ""
        }
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Log Group
  AgentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/devops-agent/${Environment}'
      RetentionInDays: 30

Outputs:
  ConversationsTableName:
    Description: DynamoDB Conversations Table Name
    Value: !Ref ConversationsTable
    Export:
      Name: !Sub '${Environment}-ConversationsTable'

  SessionsTableName:
    Description: DynamoDB Sessions Table Name
    Value: !Ref SessionsTable
    Export:
      Name: !Sub '${Environment}-SessionsTable'

  ActionsTableName:
    Description: DynamoDB Actions Table Name
    Value: !Ref ActionsTable
    Export:
      Name: !Sub '${Environment}-ActionsTable'

  KnowledgeBaseBucketName:
    Description: S3 Knowledge Base Bucket Name
    Value: !Ref KnowledgeBaseBucket
    Export:
      Name: !Sub '${Environment}-KnowledgeBaseBucket'

  LogsBucketName:
    Description: S3 Logs Bucket Name
    Value: !Ref LogsBucket
    Export:
      Name: !Sub '${Environment}-LogsBucket'

  LambdaExecutionRoleArn:
    Description: Lambda Execution Role ARN
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${Environment}-LambdaExecutionRole'

  APIKeysSecretArn:
    Description: Secrets Manager Secret ARN
    Value: !Ref APIKeysSecret
    Export:
      Name: !Sub '${Environment}-APIKeysSecret'

